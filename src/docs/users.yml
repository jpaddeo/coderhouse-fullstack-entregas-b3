paths:
  /api/users:
    get:
      summary: Obtener todos los usuarios
      tags:
        - Users
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Cantidad de usuarios a devolver
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número de página
      responses:
        200:
          description: Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        500:
          description: Error interno del servidor
    post:
      summary: Crear un nuevo usuario
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        201:
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  payload:
                    $ref: '#/components/schemas/User'
        400:
          description: Datos de entrada inválidos
        500:
          description: Error interno del servidor

  /api/users/{uid}:
    get:
      summary: Obtener usuario por ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID del usuario
      responses:
        200:
          description: Usuario obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  payload:
                    $ref: '#/components/schemas/User'
        404:
          description: Usuario no encontrado
        500:
          description: Error interno del servidor
    put:
      summary: Actualizar usuario por ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID del usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        200:
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  payload:
                    $ref: '#/components/schemas/User'
        400:
          description: Datos de entrada inválidos
        404:
          description: Usuario no encontrado
        500:
          description: Error interno del servidor
    delete:
      summary: Eliminar usuario por ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: ID del usuario
      responses:
        200:
          description: Usuario eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Usuario eliminado exitosamente
        404:
          description: Usuario no encontrado
        500:
          description: Error interno del servidor

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Identificador único del usuario
        first_name:
          type: string
          description: Nombre del usuario
        last_name:
          type: string
          description: Apellido del usuario
        email:
          type: string
          format: email
          description: Correo electrónico del usuario
        password:
          type: string
          description: Contraseña del usuario
        role:
          type: string
          description: Rol del usuario
          enum: ['user', 'admin']
          default: 'user'
        pets:
          type: array
          items:
            type: string
          description: Lista de IDs de mascotas adoptadas por el usuario
      example:
        _id: '64f8b5c7e8a4d5f6a7b8c9d1'
        first_name: 'Juan'
        last_name: 'Pérez'
        email: 'juan.perez@email.com'
        password: '$2b$10$...'
        role: 'user'
        pets: ['64f8b5c7e8a4d5f6a7b8c9d0']

    UserInput:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
          description: Nombre del usuario
        last_name:
          type: string
          description: Apellido del usuario
        email:
          type: string
          format: email
          description: Correo electrónico del usuario
        password:
          type: string
          description: Contraseña del usuario
        role:
          type: string
          description: Rol del usuario
          enum: ['user', 'admin']
          default: 'user'
      example:
        first_name: 'Juan'
        last_name: 'Pérez'
        email: 'juan.perez@email.com'
        password: 'miContraseñaSegura123'
        role: 'user'
